import asyncio
import socket
import json

class RocksDBClient:
    def __init__(self, host: str, port: int, token: str = None, timeout: int = 20, retry_interval: int = 2):
        self.host = host
        self.port = port
        self.token = token
        self.timeout = timeout
        self.retry_interval = retry_interval
        self.socket = None

    async def connect(self):
        start_time = asyncio.get_event_loop().time()

        while True:
            try:
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                await asyncio.get_event_loop().sock_connect(self.socket, (self.host, self.port))
                return  # Connection successful
            except Exception as error:
                if (asyncio.get_event_loop().time() - start_time) >= self.timeout:
                    raise Exception(f"Unable to connect to server: {error}")
                await asyncio.sleep(self.retry_interval)

    def close(self):
        if self.socket:
            self.socket.close()
            self.socket = None

    async def send_request(self, request):
        if not self.socket:
            await self.connect()

        if self.token is not None:
            request['token'] = self.token  # Add token to request if present

        request_json = json.dumps(request) + "\n"
        self.socket.sendall(request_json.encode('utf-8'))

        response_json = await self.read_socket()
        response = json.loads(response_json)

        if response is None:
            raise Exception("Invalid response from server")

        return response

    async def read_socket(self):
        data = b''
        while True:
            chunk = await asyncio.get_event_loop().sock_recv(self.socket, 4096)
            data += chunk
            if b"\n" in data:
                break
        return data.decode('utf-8')

    def handle_response(self, response):
        if response['success'] and 'result' in response:
            return response['result']
        raise Exception(response['result'])

    {{ methods }}

