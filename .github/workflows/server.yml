name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    env:
      TARGETS_LINUX: x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu i586-unknown-linux-gnu powerpc-unknown-linux-gnu
      TARGETS_MAC: x86_64-apple-darwin aarch64-apple-darwin
      TARGETS_WINDOWS: x86_64-pc-windows-msvc x86_64-pc-windows-gnu i686-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup LLVM & Clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: 16
          directory: ${{ runner.temp }}/llvm-16
          cached: true

      - name: Configure Clang
        run: |
          echo "LIBCLANG_PATH=${{ runner.temp }}/llvm-16/lib" >> $GITHUB_ENV
          echo "LLVM_VERSION=${{ steps.clang.outputs.version }}" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ runner.temp }}/llvm-16/bin/llvm-config" >> $GITHUB_ENV

      - name: Install osxcross toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y curl make gcc
          git clone https://github.com/tpoechtrager/osxcross.git
          cd osxcross
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
          tar -xf MacOSX11.3.sdk.tar.xz
          mv MacOSX11.3.sdk tarballs/
          SDK_VERSION=11.3 OSX_VERSION_MIN=11.0 ./build.sh
          echo "CC=/home/runner/work/osxcross/target/bin/o64-clang" >> $GITHUB_ENV
          echo "CXX=/home/runner/work/osxcross/target/bin/o64-clang++" >> $GITHUB_ENV
          echo "PATH=/home/runner/work/osxcross/target/bin:$PATH" >> $GITHUB_ENV

      - name: Install AArch64 toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install latest Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup default stable
          for target in $TARGETS_LINUX $TARGETS_MAC $TARGETS_WINDOWS; do
            rustup target add $target
          done

      - name: Get version
        id: version
        run: echo ::set-output name=version::$(grep '^version =' server/Cargo.toml | sed 's/version = "\(.*\)"/\1/')

      - name: Build and Release
        run: |
          mkdir -p releases
          for target in $TARGETS_LINUX $TARGETS_MAC $TARGETS_WINDOWS; do
            if [[ "$target" == *"apple-darwin"* ]]; then
              export CC=o64-clang
              export CXX=o64-clang++
            fi
            cargo build --release --target $target --manifest-path=server/Cargo.toml
            if [[ "$target" == *"windows"* ]]; then
              cp target/$target/release/server.exe releases/server-${{ steps.version.outputs.version }}-$target.exe
            else
              cp target/$target/release/server releases/server-${{ steps.version.outputs.version }}-$target
            fi
          done

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: server-v${{ steps.version.outputs.version }}
          name: Server Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: releases/
          asset_name: server-${{ steps.version.outputs.version }}-${{ matrix.os }}
          asset_content_type: application/octet-stream
