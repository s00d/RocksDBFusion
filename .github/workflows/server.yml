name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest]
        #        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          #          - os: ubuntu-latest
          #            targets: x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu i586-unknown-linux-gnu powerpc-unknown-linux-gnu
#          - os: macos-latest
#            targets: x86_64-apple-darwin aarch64-apple-darwin
          - os: windows-latest
            targets: x86_64-pc-windows-msvc x86_64-pc-windows-gnu i686-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup dependencies on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev gcc-aarch64-linux-gnu

      - name: Setup LLVM & Clang on Linux
        if: matrix.os == 'ubuntu-latest'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: 16
          directory: ${{ runner.temp }}/llvm-16
          cached: true

      - name: Configure Clang on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "LIBCLANG_PATH=${{ runner.temp }}/llvm-16/lib" >> $GITHUB_ENV
          echo "LLVM_VERSION=${{ steps.clang.outputs.version }}" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ runner.temp }}/llvm-16/bin/llvm-config" >> $GITHUB_ENV

      - name: Install Rust toolchain on Linux and macOS
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup default stable
          for target in ${{ matrix.targets }}; do
            rustup target add $target
          done

      - name: Install Rust toolchain on Windows
        if: matrix.os == 'windows-latest'
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri https://win.rustup.rs/x86_64 -OutFile rustup-init.exe
          Start-Process -FilePath .\rustup-init.exe -ArgumentList '-y' -NoNewWindow -Wait
          $env:Path += ';C:\Users\runneradmin\.cargo\bin'
          $targets = "${{ matrix.targets }}".Split(" ")
          foreach ($target in $targets) {
            rustup target add $target
          }

      - name: Get version
        id: version
        run: echo ::set-output name=version::$(grep '^version =' server/Cargo.toml | sed 's/version = "\(.*\)"/\1/')

      - name: Build and Release on Linux and macOS
        if: matrix.os == 'ubuntu-latest'
        env:
          LIBCLANG_PATH: ${{ runner.temp }}/llvm-16/lib
        run: |
          mkdir -p releases
          for target in ${{ matrix.targets }}; do
            cargo build --release --target $target --manifest-path=server/Cargo.toml || continue
            cp target/$target/release/rocksdb_server releases/server-${{ steps.version.outputs.version }}-$target
          done

      - name: Build and Release on macOS
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p releases
          echo "LIBCLANG_PATH=${LIBCLANG_PATH}"
          echo "DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}"
          for target in ${{ matrix.targets }}; do
            cargo build --release --target $target --manifest-path=server/Cargo.toml || continue
            cp target/$target/release/rocksdb_server releases/server-${{ steps.version.outputs.version }}-$target
          done

      - name: Build and Release on Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p releases
          $targets = "${{ matrix.targets }}".Split(" ")
          foreach ($target in $targets) {
            cargo build --release --target $target --manifest-path=server/Cargo.toml
            if ($?) {
              Copy-Item -Path "target\$target\release\rocksdb_server.exe" -Destination "releases\server-${{ steps.version.outputs.version }}-$target.exe"
            }
          }

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: server-v${{ steps.version.outputs.version }}
          name: Server Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets on Linux and macOS
        if: matrix.os != 'windows-latest'
        run: |
          for file in releases/*; do
            gh release upload server-v${{ steps.version.outputs.version }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets on Windows
        if: matrix.os == 'windows-latest'
        run: |
          $files = Get-ChildItem -Path releases
          foreach ($file in $files) {
            gh release upload server-v${{ steps.version.outputs.version }} $file.FullName --clobber
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
