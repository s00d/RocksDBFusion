name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        clang: ['16'] # Specify the Clang versions you want to use

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache cargo and LLVM and Clang
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            ${{ runner.temp }}/llvm-${{ matrix.clang }}
          key: ${{ runner.os }}-cargo-llvm-${{ matrix.clang }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup LLVM & Clang
        id: clang
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ matrix.clang }}
          directory: ${{ runner.temp }}/llvm-${{ matrix.clang }}
          cached: ${{ steps.cache.outputs.cache-hit }}

      - name: Configure Clang
        run: |
          echo "LIBCLANG_PATH=${{ runner.temp }}/llvm-${{ matrix.clang }}/lib" >> $GITHUB_ENV
          echo "LLVM_VERSION=${{ steps.clang.outputs.version }}" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=${{ runner.temp }}/llvm-${{ matrix.clang }}/bin/llvm-config" >> $GITHUB_ENV

      - name: Install latest Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup default stable
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
          rustup target add i586-unknown-linux-gnu
          rustup target add powerpc-unknown-linux-gnu
          rustup target add x86_64-apple-darwin
          rustup target add x86_64-pc-windows-msvc
          rustup target add x86_64-pc-windows-gnu
          rustup target add i686-pc-windows-msvc
          rustup +nightly target add aarch64-apple-darwin

      - name: Get version
        id: version
        run: echo ::set-output name=version::$(grep '^version =' server/Cargo.toml | sed 's/version = "\(.*\)"/\1/')

      - name: Check if version exists
        id: version-check
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.version;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const { data: releases } = await github.rest.repos.listReleases({
              owner,
              repo,
            });
            if (releases.some(release => release.tag_name === `server-v${version}`)) {
              core.setOutput('exists', 'true');
            } else {
              core.setOutput('exists', 'false');
            }

      - name: Build and Release
        if: steps.version-check.outputs.exists == 'false'
        run: |
          mkdir -p releases

          for target in aarch64-unknown-linux-gnu i586-unknown-linux-gnu powerpc-unknown-linux-gnu x86_64-unknown-linux-gnu x86_64-apple-darwin x86_64-pc-windows-msvc x86_64-pc-windows-gnu i686-pc-windows-msvc; do
            cargo build --release --target $target --manifest-path=server/Cargo.toml
            cp target/$target/release/server releases/server-${{ steps.version.outputs.version }}-$target
          done

          cargo +nightly build --release --target aarch64-apple-darwin --manifest-path=server/Cargo.toml
          cp target/aarch64-apple-darwin/release/server releases/server-${{ steps.version.outputs.version }}-aarch64-apple-darwin

      - name: Create Release
        if: steps.version-check.outputs.exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: server-v${{ steps.version.outputs.version }}
          release_name: Server Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        if: steps.version-check.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: releases/
          asset_name: server-${{ steps.version.outputs.version }}-${{ env.TARGET }}
          asset_content_type: application/octet-stream
