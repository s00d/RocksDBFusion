import { createConnection } from "net";
import type {Socket} from "node:net";

interface RocksDBResponse {
    success: boolean;
    result?: string;
    error?: string;
}

class RocksDBClient {
    host: string;
    port: number;
    token: string | null;
    socket: any;
    timeout: number;
    retryInterval: number;
    private pool: any[];
    private maxActiveConnections: number;
    private activeConnections: number;
    private waitingQueue: ((value: Socket) => void)[];

    /**
     * Constructor to initialize the RocksDB client.
     *
     * @param {string} host The host of the RocksDB server.
     * @param {number} port The port of the RocksDB server.
     * @param {string|null} [token] Optional authentication token for the RocksDB server.
     * @param {number} [timeout=20] Timeout in seconds.
     * @param {number} [retryInterval=2] Retry interval in seconds.
     */
    constructor(host: string, port: number, token: string | null = null, timeout: number = 20, retryInterval: number = 2) {
        this.host = host;
        this.port = port;
        this.token = token;
        this.timeout = timeout;
        this.retryInterval = retryInterval;
        this.socket = null;
        this.pool = [];
        this.maxActiveConnections = 10;
        this.activeConnections = 0;
        this.waitingQueue = [];
    }

    /**
     * Closes all connections in the pool.
     */
    close(): void {
        for (const socket of this.pool) {
            socket.end();
        }
        this.pool = [];
    }

    private async createSocket(host: string, port: number): Promise<Socket> {
        return new Promise((resolve, reject) => {
            const socket = createConnection({ host, port }, () => {
                socket.setMaxListeners(3000);
                resolve(socket);
            });
            socket.on('error', reject);
        });
    }

    private async getConnection(): Promise<Socket> {
        if (this.pool.length > 0) {
            return this.pool.pop();
        }

        if (this.activeConnections < this.maxActiveConnections) {
            this.activeConnections++;
            return this.createSocket(this.host, this.port);
        }

        // If the maximum number of active connections is reached, wait for a connection to be released
        return new Promise((resolve) => {
            this.waitingQueue.push(resolve);
        });
    }

    private releaseConnection(socket: Socket) {
        if (this.waitingQueue.length > 0) {
            // If there are waiting requests, resolve the first one
            const resolve = this.waitingQueue.shift();
            if (resolve) {
                resolve(socket);
            }
        } else {
            this.pool.push(socket);
            this.activeConnections--;
        }
    }

    async sendRequest(request: object): Promise<RocksDBResponse> {
        if (this.token !== null) {
            (request as any).token = this.token;
        }

        const requestData = JSON.stringify(request); // Use JSON encoding
        const socket = await this.getConnection();
        socket.write(Buffer.concat([Buffer.from(requestData), Buffer.from('\n')]));

        return new Promise((resolve, reject) => {
            let dataBuffer: Buffer[] = [];

            const onData = (data: Buffer) => {
                dataBuffer.push(data);

                const responseBuffer = Buffer.concat(dataBuffer);
                const separatorIndex = responseBuffer.indexOf('\n');

                if (separatorIndex !== -1) {
                    const completeMessage = responseBuffer.slice(0, separatorIndex).toString();
                    const remainingBuffer = responseBuffer.slice(separatorIndex + 1);

                    try {
                        const response: RocksDBResponse = JSON.parse(completeMessage); // Use JSON decoding
                        socket.removeListener('data', onData);
                        this.releaseConnection(socket);
                        resolve(response);
                    } catch (error) {
                        console.error("Failed to decode response: {}", error);
                        reject(new Error("Failed to decode response"));
                    }

                    dataBuffer = [];
                    if (remainingBuffer.length > 0) {
                        dataBuffer.push(remainingBuffer);
                    }
                }
            };

            socket.on('data', onData);

            socket.once('error', (err: Error) => {
                socket.removeListener('data', onData);
                this.releaseConnection(socket);
                reject(err);
            });

            socket.once('close', () => {
                socket.removeListener('data', onData);
                this.releaseConnection(socket);
                reject(new Error("Connection closed before response was received"));
            });
        });
    }

    /**
     * Handles the response from the server.
     *
     * @param {object} response The response from the server.
     * @return {any} The result from the response.
     * @throws {Error} If the response indicates an error.
     */
    handleResponse(response: RocksDBResponse): string|null {
        if (response.success && response.result !== undefined) {
            return response.result;
        }

        throw new Error(response.error);
    }

{{{methods}}}
}

// Export the class
export default RocksDBClient;